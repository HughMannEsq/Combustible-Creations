@page
@model AutumnRidgeUSA.Pages.Admin.ClientsModel
@{
    ViewData["Title"] = "Admin Dashboard";
}

<h2>Admin Dashboard</h2>

@if (!string.IsNullOrEmpty(Model.StatusMessage))
{
    <div class="alert alert-info">
        @Model.StatusMessage
    </div>
}

<!-- Storage Contract Modal -->
<div id="storageModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Contract Details</h3>
            <span class="close" onclick="closeStorageModal()">&times;</span>
        </div>
        <div class="modal-body" id="storageModalBody">
            <!-- Content will be dynamically inserted here -->
        </div>
    </div>
</div>

<!-- Tab Navigation -->
<div class="tab-container">
    <div class="tab-buttons">
        <button class="tab-button active" onclick="showTab('clients')">Client Database</button>
        <button class="tab-button" onclick="showTab('tempsignups')">Temp Signups (@Model.TempSignups.Count)</button>
    </div>

    <!-- Clients Tab -->
    <div id="clients-tab" class="tab-content active">
        <div class="tab-header">
            <h3>Registered Clients</h3>
            <p>Total clients: @Model.Clients.Count</p>
        </div>

        <!-- Division Filter Toolbar -->
        <div class="custom-toolbar">
            <div class="toolbar-left">
                <div class="dropdown-container">
                    <button type="button" class="filter-divisions-btn" id="filterDivisionsBtn" onclick="toggleDivisionDropdown()">
                        <span id="filterButtonText">
                            @if (Model.DivisionFilter.SelectedDivisionIds.Any())
                            {
                                @($"Filter by Divisions ({Model.DivisionFilter.SelectedDivisionIds.Count} selected)")
                            }
                            else
                            {
                                @("Filter by Divisions")
                            }
                        </span>
                        <span style="margin-left: 5px;">▼</span>
                    </button>

                    <div class="dropdown-content" id="divisionDropdown">
                        <div class="dropdown-header">
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <span>Filter by Divisions</span>
                                <button type="button" class="operator-btn @(Model.DivisionFilter.FilterOperator.ToLower())"
                                        onclick="toggleFilterOperator()">
                                    @Model.DivisionFilter.FilterOperator
                                </button>
                            </div>
                        </div>

                        <div class="division-checkboxes">
                            @foreach (var division in Model.DivisionFilter.AvailableDivisions)
                            {
                                <label class="division-checkbox">
                                    <input type="checkbox"
                                           name="division-@division.Id"
                                           value="@division.Id"/>
                                    <input type="checkbox" name="division-@division.Id" value="@division.Id.ToString()"
                                           onchange="updateDivisionFilter()" />
                                    @division.Name
                                </label>
                            }
                        </div>

                        <div style="margin-top: 15px; padding-top: 15px; border-top: 1px solid #eee;">
                            <button type="button" onclick="clearAllFilters()" class="action-btn secondary" style="margin-right: 10px;">
                                Clear All
                            </button>
                            <button type="button" onclick="applyDivisionFilter()" class="action-btn primary">
                                Apply Filter
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="toolbar-right">
                <a href="/Admin/ImportExcel" class="action-btn primary">Import Excel</a>
            </div>
        </div>

        <!-- Hidden Division Filtering Form -->
        <form method="get" id="divisionFilterForm" style="display: none;">
            <input type="hidden" name="filterOperator" id="filterOperatorInput" value="@Model.DivisionFilter.FilterOperator" />
            @foreach (var division in Model.DivisionFilter.AvailableDivisions)
            {
                <input type="checkbox" name="selectedDivisions" value="@division.Id"
                       id="hidden-@division.Id"
                @(Model.DivisionFilter.SelectedDivisionIds.Contains(division.Id.ToString()) ? "checked" : "") />
            }
        </form>

        <table id="clientsTable" class="data-table">
            <thead>
                <tr>
                    <th>UserId</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Address</th>
                    <th>Divisions</th>
                    <th>Signup Date</th>
                    <th>Balance</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var client in Model.Clients)
                {
                    <tr>
                        <td><strong>@client.UserId</strong></td>
                        <td>@client.FullName</td>
                        <td>
                            <a href="mailto:@client.Email" style="color: #007bff; text-decoration: none;">
                                @client.Email
                            </a>
                        </td>
                        <td>@(client.PhoneNumber ?? "N/A")</td>
                        <td>
                            @if (!string.IsNullOrEmpty(client.FullAddress))
                            {
                                <span title="@client.FullAddress">@client.FullAddress</span>
                            }
                            else
                            {
                                <span style="color: #666; font-style: italic;">No address</span>
                            }
                        </td>
                        <td style="white-space: pre-line;">@(client.PhoneNumber ?? "N/A")</td>
                        <td>
                            @if (!string.IsNullOrEmpty(client.Divisions))
                            {
                                <div class="divisions-cell">
                                    @foreach (var division in client.Divisions.Split(','))
                                    {
                                        var divName = division.Trim();
                                        var divClass = divName.ToLower().Replace(" ", "");

                                        @if (divName.Equals("Storage", StringComparison.OrdinalIgnoreCase))
                                        {
                                            <span class="division-badge division-@divClass clickable-storage"
                                                  onclick="openStorageModal('@client.UserId')"
                                                  style="cursor: pointer;">
                                                @divName
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="division-badge division-@divClass">
                                                @divName
                                            </span>
                                        }
                                    }
                                </div>
                            }
                            else
                            {
                                <span class="text-muted">None</span>
                            }
                        </td>
                        <td>@client.SignupDate.ToString("MM/dd/yyyy")</td>
                        <td style="text-align: right; font-weight: bold;">@client.Balance.ToString("C")</td>
                    </tr>
                }

                @if (!Model.Clients.Any())
                {
                    <tr>
                        <td colspan="8" class="no-data">No clients found matching current filters</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Temp Signups Tab -->
    <div id="tempsignups-tab" class="tab-content">
        <div class="tab-header">
            <h3>Temporary Signups</h3>
            <div class="tab-actions">
                <p>Pending signups: @Model.TempSignups.Count</p>
                <form method="post" asp-page-handler="CleanupExpired" style="display: inline;">
                    <button type="submit" class="btn btn-warning" onclick="return confirm('Delete all expired signups?')">
                        Clean Up Expired
                    </button>
                </form>
            </div>
        </div>

        <table id="tempSignupsTable" class="data-table">
            <thead>
                <tr>
                    <th>UserId</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Created</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var signup in Model.TempSignups)
                {
                    <tr class="@(signup.IsExpired ? "expired-row" : "")">
                        <td><strong>@signup.UserId</strong></td>
                        <td>@signup.LastName, @signup.FirstName</td>
                        <td>
                            <a href="mailto:@signup.Email" style="color: #007bff; text-decoration: none;">
                                @signup.Email
                            </a>
                        </td>
                        <td>@signup.CreatedAt.ToString("MM/dd/yyyy HH:mm")</td>
                        <td>
                            @if (signup.IsExpired)
                            {
                                <span class="status-expired">EXPIRED</span>
                            }
                            else if (signup.IsAuthorized)
                            {
                                <span class="status-authorized">AUTHORIZED</span>
                            }
                            else
                            {
                                <span class="status-pending">@signup.TimeRemaining</span>
                            }
                        </td>
                        <td>
                            @if (!signup.IsAuthorized)
                            {
                                <form method="post" asp-page-handler="DeleteTempSignup" style="display: inline;">
                                    <input type="hidden" name="signupId" value="@signup.Id" />
                                    <button type="submit" class="btn btn-danger btn-sm"
                                            onclick="return confirm('Delete signup for @signup.Email?')">
                                        Delete
                                    </button>
                                </form>

                                @if (!signup.IsExpired)
                                {
                                    <form method="post" asp-page-handler="ResendEmail" style="display: inline;">
                                        <input type="hidden" name="signupId" value="@signup.Id" />
                                        <button type="submit" class="btn btn-primary btn-sm">
                                            Resend
                                        </button>
                                    </form>
                                }
                            }
                        </td>
                    </tr>
                }

                @if (!Model.TempSignups.Any())
                {
                    <tr>
                        <td colspan="6" class="no-data">No temporary signups found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css" />

    <style>
        /* Custom Toolbar and Filtering Styles */
        .custom-toolbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .toolbar-left {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .toolbar-right {
            display: flex;
            align-items: center;
        }

        .dropdown-container {
            position: relative;
        }

        .filter-divisions-btn {
            padding: 8px 16px;
            background: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
        }

            .filter-divisions-btn:hover {
                background-color: #e9ecef;
                border-color: #1e3a5f;
            }

            .filter-divisions-btn.active {
                background-color: #1e3a5f;
                color: white;
            }

        .dropdown-content {
            display: none;
            position: absolute;
            top: calc(100% + 5px);
            left: 0;
            background: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 15px;
            z-index: 1000;
            min-width: 350px;
            max-width: 500px;
        }

            .dropdown-content.show {
                display: block;
            }

        .dropdown-header {
            margin-bottom: 10px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
            font-weight: 600;
            color: #1e3a5f;
        }

        .dropdown-content .division-checkboxes {
            display: flex;
            flex-direction: column;
            gap: 8px;
            max-height: 300px;
            overflow-y: auto;
        }

        .dropdown-content .division-checkbox {
            display: flex;
            align-items: center;
            padding: 8px 12px;
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s;
        }

            .dropdown-content .division-checkbox:hover {
                background-color: #e3f2fd;
                border-color: #1e3a5f;
            }

            .dropdown-content .division-checkbox input[type="checkbox"] {
                margin-right: 8px;
                cursor: pointer;
            }

        .operator-btn {
            padding: 6px 12px;
            border-radius: 20px;
            border: none;
            font-weight: bold;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.2s;
            text-transform: uppercase;
        }

            .operator-btn.and {
                background-color: #dc3545;
                color: white;
            }

            .operator-btn.or {
                background-color: #28a745;
                color: white;
            }

        .action-btn {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            font-weight: 500;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            transition: all 0.2s;
        }

            .action-btn.primary {
                background-color: #007bff;
                color: white;
            }

                .action-btn.primary:hover {
                    background-color: #0056b3;
                }

            .action-btn.secondary {
                background-color: #6c757d;
                color: white;
            }

                .action-btn.secondary:hover {
                    background-color: #545b62;
                }

        .dataTables_filter label {
            margin-bottom: 0;
        }

        .dataTables_filter input {
            margin-left: 0.5em;
            padding: 5px 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .dataTables_length label {
            margin-bottom: 0;
        }

        .dataTables_length select {
            margin: 0 0.5em;
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 0;
            border: 1px solid #888;
            border-radius: 8px;
            width: 700px;
            max-width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .modal-header {
            background-color: #1e3a5f;
            color: white;
            padding: 15px 20px;
            border-radius: 8px 8px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

            .modal-header h3 {
                margin: 0;
            }

        .close {
            color: white;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            line-height: 20px;
        }

            .close:hover {
                color: #f0f0f0;
            }

        .modal-body {
            padding: 20px;
        }

        /* Storage Contract Modal Styles */
        .clickable-storage {
            transition: all 0.2s;
        }

            .clickable-storage:hover {
                transform: scale(1.05);
                box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            }

        .contracts-header {
            text-align: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e9ecef;
        }

            .contracts-header h4 {
                margin: 0 0 5px 0;
                color: #1e3a5f;
            }

            .contracts-header p {
                margin: 0;
                color: #666;
                font-style: italic;
            }

        .contract-card {
            border: 1px solid #ddd;
            border-radius: 8px;
            margin-bottom: 15px;
            overflow: hidden;
        }

            .contract-card.active {
                border-color: #28a745;
                background-color: #f8fff9;
            }

            .contract-card.inactive {
                border-color: #dc3545;
                background-color: #fff8f8;
            }

        .contract-header {
            background-color: #f8f9fa;
            padding: 12px 15px;
            border-bottom: 1px solid #ddd;
        }

        .contract-card.active .contract-header {
            background-color: #d4edda;
        }

        .contract-card.inactive .contract-header {
            background-color: #f8d7da;
        }

        .contract-header h5 {
            margin: 0;
            font-size: 16px;
            color: #333;
        }

        .contract-card .contract-details {
            padding: 15px;
        }

        .contract-separator {
            height: 1px;
            background-color: #e9ecef;
            margin: 10px 0;
        }

        .contract-details {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .detail-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 6px 0;
            border-bottom: 1px solid #f0f0f0;
        }

            .detail-row label {
                font-weight: bold;
                color: #333;
                min-width: 120px;
            }

            .detail-row span {
                color: #666;
                text-align: right;
            }

        .status-active {
            color: #28a745;
            font-weight: bold;
        }

        .status-inactive {
            color: #dc3545;
            font-weight: bold;
        }

        /* Tab Styles */
        .tab-container {
            margin-top: 20px;
        }

        .tab-buttons {
            display: flex;
            border-bottom: 2px solid #ddd;
            margin-bottom: 20px;
        }

        .tab-button {
            background: none;
            border: none;
            padding: 12px 20px;
            cursor: pointer;
            border-bottom: 3px solid transparent;
            font-weight: bold;
            color: #666;
            transition: all 0.3s;
        }

            .tab-button:hover {
                color: #1e3a5f;
                background-color: #f8f9fa;
            }

            .tab-button.active {
                color: #1e3a5f;
                border-bottom-color: #1e3a5f;
            }

        .tab-content {
            display: none;
        }

            .tab-content.active {
                display: block;
            }

        .tab-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }

        .tab-actions {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        /* Division badges */
        .divisions-cell {
            display: flex;
            gap: 4px;
            flex-wrap: wrap;
        }

        .division-badge {
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .division-storage {
            background-color: #e3f2fd;
            color: #1565c0;
            border: 1px solid #bbdefb;
        }

        .division-contracting {
            background-color: #fff3e0;
            color: #ef6c00;
            border: 1px solid #ffcc02;
        }

        .division-realestate {
            background-color: #e8f5e8;
            color: #2e7d32;
            border: 1px solid #c8e6c9;
        }

        /* Table Styles */
        .data-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

            .data-table thead th {
                background-color: #f8f9fa;
                border: 1px solid #ddd;
                padding: 12px;
                text-align: left;
                font-weight: bold;
                color: #495057;
            }

            .data-table tbody td {
                border: 1px solid #ddd;
                padding: 10px 12px;
                vertical-align: middle;
            }

            .data-table tbody tr:hover {
                background-color: #f8f9fa;
            }

        .expired-row {
            background-color: #ffe6e6;
        }

        .no-data {
            text-align: center;
            font-style: italic;
            color: #666;
            padding: 20px;
        }

        /* Status Badges */
        .status-expired {
            background-color: #dc3545;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
        }

        .status-authorized {
            background-color: #28a745;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
        }

        .status-pending {
            background-color: #ffc107;
            color: #212529;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
        }

        /* Button Styles */
        .btn {
            padding: 6px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            font-size: 12px;
            font-weight: bold;
            transition: all 0.2s;
        }

        .btn-sm {
            padding: 4px 8px;
            font-size: 11px;
        }

        .btn-danger {
            background-color: #dc3545;
            color: white;
        }

        .btn-primary {
            background-color: #007bff;
            color: white;
        }

        .btn-warning {
            background-color: #ffc107;
            color: #212529;
        }

        .text-muted {
            color: #666;
            font-style: italic;
        }
    </style>

    <script>
        let currentFilterOperator = '@Model.DivisionFilter.FilterOperator';

        // Division Filter Functions
        function toggleDivisionDropdown() {
            const dropdown = document.getElementById('divisionDropdown');
            dropdown.classList.toggle('show');
        }

        function toggleFilterOperator() {
            const btn = document.querySelector('.operator-btn');
            if (currentFilterOperator === 'AND') {
                currentFilterOperator = 'OR';
                btn.textContent = 'OR';
                btn.className = 'operator-btn or';
            } else {
                currentFilterOperator = 'AND';
                btn.textContent = 'AND';
                btn.className = 'operator-btn and';
            }
            document.getElementById('filterOperatorInput').value = currentFilterOperator;
        }

        function updateDivisionFilter() {
            const checkboxes = document.querySelectorAll('#divisionDropdown input[type="checkbox"]');
            const selectedCount = Array.from(checkboxes).filter(cb => cb.checked).length;

            const filterBtn = document.getElementById('filterDivisionsBtn');
            const filterText = document.getElementById('filterButtonText');

            if (selectedCount > 0) {
                filterBtn.classList.add('active');
                filterText.textContent = `Filter by Divisions (${selectedCount} selected)`;
            } else {
                filterBtn.classList.remove('active');
                filterText.textContent = 'Filter by Divisions';
            }
        }

        function clearAllFilters() {
            const checkboxes = document.querySelectorAll('#divisionDropdown input[type="checkbox"]');
            checkboxes.forEach(cb => cb.checked = false);
            updateDivisionFilter();
        }

        function applyDivisionFilter() {
            const checkboxes = document.querySelectorAll('#divisionDropdown input[type="checkbox"]:checked');
            const selectedDivisions = Array.from(checkboxes).map(cb => cb.value);

            // Update hidden form
            const hiddenCheckboxes = document.querySelectorAll('#divisionFilterForm input[name="selectedDivisions"]');
            hiddenCheckboxes.forEach(cb => cb.checked = false);

            selectedDivisions.forEach(divisionId => {
                const hiddenCheckbox = document.querySelector(`#hidden-${divisionId}`);
                if (hiddenCheckbox) {
                    hiddenCheckbox.checked = true;
                }
            });

            // Update filter operator
            document.getElementById('filterOperatorInput').value = currentFilterOperator;

            // Submit the form
            document.getElementById('divisionFilterForm').submit();

            // Close dropdown
            document.getElementById('divisionDropdown').classList.remove('show');
        }

        // Storage Modal Functions
        function openStorageModal(userId) {
            // Show loading state
            document.getElementById('storageModalBody').innerHTML = '<div style="text-align: center; padding: 20px;"><i class="spinner"></i> Loading contract details...</div>';
            document.getElementById('storageModal').style.display = 'block';

            // Fetch storage contract details
            fetch(`/Admin/Clients?handler=StorageContract&userId=${userId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displayStorageContracts(data.contracts, userId);
                    } else {
                        document.getElementById('storageModalBody').innerHTML =
                            `<div class="alert alert-warning">${data.message || 'No storage contracts found for this client.'}</div>`;
                    }
                })
                .catch(error => {
                    console.error('Error fetching storage contracts:', error);
                    document.getElementById('storageModalBody').innerHTML =
                        '<div class="alert alert-danger">Error loading contract details. Please try again.</div>';
                });
        }

        function displayStorageContracts(contracts, userId) {
            const modalBody = document.getElementById('storageModalBody');

            if (!contracts || contracts.length === 0) {
                modalBody.innerHTML = '<div class="alert alert-warning">No storage contracts found for this user.</div>';
                return;
            }

            let contractsHtml = `
                <div class="contracts-header">
                    <h4>Storage Contracts for User ${userId}</h4>
                    <p>${contracts.length} contract(s) found</p>
                </div>
            `;

            contracts.forEach((contract, index) => {
                contractsHtml += `
                    <div class="contract-card ${contract.isActive ? 'active' : 'inactive'}">
                        <div class="contract-header">
                            <h5>Contract #${contract.id} ${contract.isActive ? '(Active)' : '(Inactive)'}</h5>
                        </div>
                        <div class="contract-details">
                            <div class="detail-row">
                                <label>Locker ID:</label>
                                <span>${contract.lockerId || 'Not assigned'}</span>
                            </div>
                            <div class="detail-row">
                                <label>Security Deposit:</label>
                                <span>${parseFloat(contract.securityDeposit || 0).toFixed(2)}</span>
                            </div>
                            <div class="detail-row">
                                <label>Deposit Status:</label>
                                <span>${contract.securityDepositReceived || 'Pending'}</span>
                            </div>
                            <div class="detail-row">
                                <label>Monthly Payment:</label>
                                <span>${parseFloat(contract.monthlyPayment || 0).toFixed(2)}</span>
                            </div>
                            <div class="detail-row">
                                <label>Payment Method:</label>
                                <span>${contract.paymentMethod || 'Not specified'}</span>
                            </div>
                            <div class="detail-row">
                                <label>Contract Start:</label>
                                <span>${contract.contractStartDate ? new Date(contract.contractStartDate).toLocaleDateString() : 'Not set'}</span>
                            </div>
                            <div class="detail-row">
                                <label>Contract End:</label>
                                <span>${contract.contractEndDate ? new Date(contract.contractEndDate).toLocaleDateString() : 'Not set'}</span>
                            </div>
                            <div class="detail-row">
                                <label>Created:</label>
                                <span>${new Date(contract.createdAt).toLocaleDateString()}</span>
                            </div>
                            ${contract.updatedAt ? `
                            <div class="detail-row">
                                <label>Last Updated:</label>
                                <span>${new Date(contract.updatedAt).toLocaleDateString()}</span>
                            </div>` : ''}
                        </div>
                    </div>
                `;

                // Add separator between contracts (except for the last one)
                if (index < contracts.length - 1) {
                    contractsHtml += '<div class="contract-separator"></div>';
                }
            });

            modalBody.innerHTML = contractsHtml;
        }

        function closeStorageModal() {
            document.getElementById('storageModal').style.display = 'none';
        }

        // Tab Functions
        function showTab(tabName) {
            $('.tab-content').removeClass('active');
            $('.tab-button').removeClass('active');
            $('#' + tabName + '-tab').addClass('active');
            $(event.target).addClass('active');
        }

        // Initialize DataTables and Event Listeners
        $(document).ready(function () {
            $('#clientsTable').DataTable({
                "order": [[6, "desc"]],
                "pageLength": 25
            });
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', function(event) {
            const dropdown = document.getElementById('divisionDropdown');
            const button = document.getElementById('filterDivisionsBtn');

            if (!dropdown.contains(event.target) && !button.contains(event.target)) {
                dropdown.classList.remove('show');
            }
        });

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('storageModal');
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        }
    </script>
}