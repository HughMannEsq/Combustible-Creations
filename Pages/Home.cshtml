@page
@model AutumnRidgeUSA.Pages.HomeModel
@{
    // Set the page title that appears in browser tab
    ViewData["Title"] = "Home - Autumn Ridge LLC";
    // Disable the shared _Layout.cshtml to prevent duplicate headers/navigation
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <!-- Link to our custom CSS file for home page styling -->
    <link rel="stylesheet" href="~/css/home.css" />
</head>
<body>
    <!-- HEADER SECTION: Contains company branding and navigation -->
    <div class="header-container">
        <!-- LEFT THIRD: Company branding with blue background -->
        <div class="company-branding">
            <h1 class="company-name">Autumn Ridge LLC</h1>
        </div>

        <!-- RIGHT TWO-THIRDS: Authentication links and navigation menu -->
        <div class="header-right">
            <!-- DYNAMIC AUTH LINKS: Change based on user's current role -->
            <div class="auth-links">
                @{
                    // Read the role cookie set by AuthController (defaults to Guest if no cookie)
                    string currentRole = Request.Cookies["ImpersonatedRole"] ?? "Guest";
                }

                @* GUEST VIEW: Show signup and login options *@
                @if (currentRole == "Guest")
                {
                    <a href="#" id="signupLink">Sign Up</a>
                    <span style="color: #FFD700;">|</span>
                    <a href="#" id="loginLink">Log In</a>
                }
                @* CLIENT VIEW: Show account management and logout *@
                else if (currentRole == "Client")
                {
                    <a href="/Account/MyAccounts">My Accounts</a>
                    <span style="color: #FFD700;">|</span>
                    <a href="/Account/Logout">Log Out</a>
                }
                <!-- In your auth links section, change the logout href -->
                @* ADMIN VIEW: Show dashboard access and logout *@
                else if (currentRole == "Admin")
                {
                <a href="/Admin/Clients">Dashboard</a>
                <span style="color: #FFD700;">|</span>
                <a href="#" onclick="logout()">Log Out</a>  <!-- Changed this -->
                }
            </div>

            <!-- MAIN NAVIGATION: Site-wide navigation menu and search -->
            <nav class="navigation">
                <div class="nav-content">
                    <!-- Navigation menu items -->
                    <ul class="nav-menu">
                        <li><a href="/Mission">Our Mission</a></li>
                        <li><a href="/Contact">Contact Us</a></li>
                        <li><a href="/About">About Us</a></li>
                    </ul>
                    <!-- Search functionality -->
                    <div class="search-container">
                        <form method="get" action="/search" style="display: inline;">
                            <input type="text" name="q" class="search-input" placeholder="Search" />
                        </form>
                    </div>
                </div>
            </nav>
        </div>
    </div>

    <!-- MAIN CONTENT SECTION -->
    <div class="main-container">
        <main class="content-area">
            <!-- ROLE SWITCHER: Dropdown for testing different user roles (development tool) -->
            <div class="role-dropdown">
                <select id="roleSelect">
                    <option value="">Select Role</option>
                    <option value="Guest">Guest</option>
                    <option value="Client">Client</option>
                    <option value="Admin">Admin</option>
                </select>
            </div>

            <!-- CONTENT GRID: Division links to subdomains -->
            <div class="content-grid">
                <!-- CONTRACTING DIVISION -->
                <a href="/Subdomains/Contracting" class="content-box content-link">
                    <div class="placeholder-icon">🏗️</div>
                    <h3>Contracting</h3>
                    <p>Professional construction and contracting services. From commercial builds to renovations, we handle all your construction needs with expertise and reliability.</p>
                    <span class="link-indicator">Learn More →</span>
                </a>

                <!-- REAL ESTATE DIVISION -->
                <a href="/Subdomains/RealEstate" class="content-box content-link">
                    <div class="placeholder-icon">🏠</div>
                    <h3>Real Estate</h3>
                    <p>Your trusted partner in buying, selling, and investing in real estate. Expert guidance and personalized service for all your property needs.</p>
                    <span class="link-indicator">Learn More →</span>
                </a>

                <!-- RESIDENTIAL DIVISION -->
                <a href="/Subdomains/Residential" class="content-box content-link">
                    <div class="placeholder-icon">🏡</div>
                    <h3>Residential</h3>
                    <p>Comprehensive residential services for homeowners. From maintenance to improvements, we keep your home in perfect condition year-round.</p>
                    <span class="link-indicator">Learn More →</span>
                </a>

                <!-- STORAGE DIVISION -->
                <a href="/Subdomains/Storage" class="content-box content-link">
                    <div class="placeholder-icon">📦</div>
                    <h3>Storage</h3>
                    <p>Secure storage solutions for personal and business needs. Climate-controlled units and flexible rental options to protect your valuables.</p>
                    <span class="link-indicator">Learn More →</span>
                </a>
            </div>
        </main>
    </div>

    <!-- SIGNUP MODAL: Only visible/functional when user is in Guest role -->
    <div id="signupModal" class="modal">
        <div class="modal-content">
            <!-- Modal header with title and close button -->
            <div class="modal-header">
                <h2>Sign Up</h2>
                <span class="close">&times;</span>
            </div>
            <!-- Modal form content -->
            <div class="modal-body">
                <form id="signupForm">
                    <!-- First name input field -->
                    <div class="form-group">
                        <label for="firstName">First Name:</label>
                        <input type="text" id="firstName" name="firstName" required>
                    </div>
                    <!-- Last name input field -->
                    <div class="form-group">
                        <label for="lastName">Last Name:</label>
                        <input type="text" id="lastName" name="lastName" required>
                    </div>
                    <!-- Email input field -->
                    <div class="form-group">
                        <label for="email">Email Address:</label>
                        <input type="email" id="email" name="email" required>
                    </div>
                    <!-- Dynamic message containers (hidden by default) -->
                    <div id="errorMessage" class="error-message" style="display: none;"></div>
                    <div id="successMessage" class="success-message" style="display: none;"></div>
                    <!-- Form action buttons -->
                    <div class="form-actions">
                        <button type="button" id="cancelBtn" class="btn-cancel">Cancel</button>
                        <button type="submit" id="submitBtn" class="btn-submit">Sign Up</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- LOGIN MODAL: Only visible/functional when user is in Guest role -->
    <div id="loginModal" class="modal">
        <div class="modal-content">
            <!-- Modal header with title and close button -->
            <div class="modal-header">
                <h2>Log In</h2>
                <span class="close login-close">&times;</span>
            </div>
            <!-- Modal form content -->
            <div class="modal-body">
                <form id="loginForm">
                    <!-- Email input field -->
                    <div class="form-group">
                        <label for="loginEmail">Email Address:</label>
                        <input type="email" id="loginEmail" name="email" required>
                    </div>
                    <!-- Password input field -->
                    <div class="form-group">
                        <label for="loginPassword">Password:</label>
                        <input type="password" id="loginPassword" name="password" required>
                    </div>
                    <!-- Dynamic message containers (hidden by default) -->
                    <div id="loginErrorMessage" class="error-message" style="display: none;"></div>
                    <div id="loginSuccessMessage" class="success-message" style="display: none;"></div>
                    <!-- Form action buttons -->
                    <div class="form-actions">
                        <button type="button" id="loginCancelBtn" class="btn-cancel">Cancel</button>
                        <button type="submit" id="loginSubmitBtn" class="btn-submit">Log In</button>
                    </div>
                </form>
                <!-- Additional login options -->
                <div class="form-footer">
                    <p><a href="/Auth/ForgotPassword">Forgot your password?</a></p>
                    <p>Don't have an account? <a href="#" id="switchToSignup">Sign up here</a></p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // LEGACY FUNCTION: No longer used but kept to prevent JS errors
        function toggleVentures() {
            // This function was for the old sidebar "Our Ventures" dropdown
            // Kept empty to avoid errors if referenced elsewhere
        }

        // ROLE SWITCHER FUNCTIONALITY: Handles dropdown role selection
        document.getElementById('roleSelect').addEventListener('change', function() {
            const selectedRole = this.value;
            console.log('Role selected:', selectedRole);

            // If a role is selected, call the server to switch roles
            if (selectedRole) {
                // Make POST request to AuthController to set role cookie
                fetch('/Auth/SwitchRole', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    // Send role as form data
                    body: `role=${encodeURIComponent(selectedRole)}`
                })
                .then(response => {
                    if (response.ok) {
                        // Reload page to show new role-specific UI
                        window.location.reload();
                    } else {
                        console.error('Failed to switch role');
                    }
                })
                .catch(error => {
                    console.error('Error switching role:', error);
                });
            }
        });

        // MODAL FUNCTIONALITY: Handles both signup and login modals
        document.addEventListener('DOMContentLoaded', function() {
            const signupModal = document.getElementById('signupModal');
            const loginModal = document.getElementById('loginModal');
            const signupLink = document.getElementById('signupLink');
            const loginLink = document.getElementById('loginLink');

            // SIGNUP MODAL FUNCTIONALITY
            if (signupLink) {
                const signupCloseBtn = signupModal.querySelector('.close');
                const cancelBtn = document.getElementById('cancelBtn');
                const signupForm = document.getElementById('signupForm');
                const errorMessage = document.getElementById('errorMessage');
                const successMessage = document.getElementById('successMessage');

                // Open signup modal
                signupLink.addEventListener('click', function(e) {
                    e.preventDefault();
                    signupModal.style.display = 'block';
                    document.body.style.overflow = 'hidden';
                });

                // Close signup modal
                function closeSignupModal() {
                    signupModal.style.display = 'none';
                    document.body.style.overflow = 'auto';
                    signupForm.reset();
                    hideSignupMessages();
                }

                signupCloseBtn.addEventListener('click', closeSignupModal);
                cancelBtn.addEventListener('click', closeSignupModal);

                // Message management for signup
                function hideSignupMessages() {
                    errorMessage.style.display = 'none';
                    successMessage.style.display = 'none';
                }

                function showSignupError(message) {
                    hideSignupMessages();
                    errorMessage.textContent = message;
                    errorMessage.style.display = 'block';
                }

                function showSignupSuccess(message) {
                    hideSignupMessages();
                    successMessage.textContent = message;
                    successMessage.style.display = 'block';
                }

                // Signup form submission
                signupForm.addEventListener('submit', async function(e) {
                    e.preventDefault();

                    const firstName = document.getElementById('firstName').value.trim();
                    const lastName = document.getElementById('lastName').value.trim();
                    const email = document.getElementById('email').value.trim();

                    if (!firstName || !lastName || !email) {
                        showSignupError('Please fill in all fields.');
                        return;
                    }

                    const submitBtn = document.getElementById('submitBtn');
                    submitBtn.disabled = true;
                    submitBtn.textContent = 'Processing...';

                    try {
                        const response = await fetch('/api/signup', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                firstName: firstName,
                                lastName: lastName,
                                email: email
                            })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            showSignupSuccess('Account created successfully! Check your email to complete registration.');
                            signupForm.reset();
                            setTimeout(closeSignupModal, 3000);
                        } else {
                            showSignupError(result.message || 'An error occurred during signup.');
                        }
                    } catch (error) {
                        showSignupError('Network error. Please try again.');
                        console.error('Signup error:', error);
                    } finally {
                        submitBtn.disabled = false;
                        submitBtn.textContent = 'Sign Up';
                    }
                });
            }

            // LOGIN MODAL FUNCTIONALITY
            if (loginLink) {
                const loginCloseBtn = loginModal.querySelector('.login-close');
                const loginCancelBtn = document.getElementById('loginCancelBtn');
                const loginForm = document.getElementById('loginForm');
                const loginErrorMessage = document.getElementById('loginErrorMessage');
                const loginSuccessMessage = document.getElementById('loginSuccessMessage');
                const switchToSignup = document.getElementById('switchToSignup');

                // Open login modal
                loginLink.addEventListener('click', function(e) {
                    e.preventDefault();
                    loginModal.style.display = 'block';
                    document.body.style.overflow = 'hidden';
                });

                // Close login modal
                function closeLoginModal() {
                    loginModal.style.display = 'none';
                    document.body.style.overflow = 'auto';
                    loginForm.reset();
                    hideLoginMessages();
                }

                loginCloseBtn.addEventListener('click', closeLoginModal);
                loginCancelBtn.addEventListener('click', closeLoginModal);

                // Switch between modals
                switchToSignup.addEventListener('click', function(e) {
                    e.preventDefault();
                    closeLoginModal();
                    signupModal.style.display = 'block';
                    document.body.style.overflow = 'hidden';
                });

                // Message management for login
                function hideLoginMessages() {
                    loginErrorMessage.style.display = 'none';
                    loginSuccessMessage.style.display = 'none';
                }

                function showLoginError(message) {
                    hideLoginMessages();
                    loginErrorMessage.textContent = message;
                    loginErrorMessage.style.display = 'block';
                }

                function showLoginSuccess(message) {
                    hideLoginMessages();
                    loginSuccessMessage.textContent = message;
                    loginSuccessMessage.style.display = 'block';
                }

                        // Add this function to your home page JavaScript
        async function logout() {
            try {
                const response = await fetch('/api/logout', {
                    method: 'POST'
                });

                if (response.ok) {
                    window.location.reload(); // Refresh to show logged-out state
                }
            } catch (error) {
                console.error('Logout error:', error);
                // Fallback: just reload the page
                window.location.reload();
            }
        }

                // Login form submission
                loginForm.addEventListener('submit', async function(e) {
                    e.preventDefault();

                    const email = document.getElementById('loginEmail').value.trim();
                    const password = document.getElementById('loginPassword').value;

                    if (!email || !password) {
                        showLoginError('Please enter both email and password.');
                        return;
                    }

                    const submitBtn = document.getElementById('loginSubmitBtn');
                    submitBtn.disabled = true;
                    submitBtn.textContent = 'Logging in...';

                    try {
                        // Use your new SecurityService via an API endpoint
                        const response = await fetch('/api/login', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                email: email,
                                password: password
                            })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            showLoginSuccess('Login successful! Redirecting...');
                            loginForm.reset();

                            // Reload page to show logged-in state
                            setTimeout(() => {
                                window.location.reload();
                            }, 1500);
                        } else {
                            showLoginError(result.message || 'Invalid email or password.');
                        }
                    } catch (error) {
                        showLoginError('Network error. Please try again.');
                        console.error('Login error:', error);
                    } finally {
                        submitBtn.disabled = false;
                        submitBtn.textContent = 'Log In';
                    }
                });
            }

            // Close modals when clicking outside
            window.addEventListener('click', function(e) {
                if (e.target === signupModal) {
                    signupModal.style.display = 'none';
                    document.body.style.overflow = 'auto';
                }
                if (e.target === loginModal) {
                    loginModal.style.display = 'none';
                    document.body.style.overflow = 'auto';
                }
            });
        });
    </script>
</body>
</html>