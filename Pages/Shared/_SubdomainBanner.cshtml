@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    var request = HttpContextAccessor.HttpContext?.Request;
    var host = request?.Host.Host.ToLower() ?? "";
    var path = request?.Path.Value?.ToLower() ?? "/";
    var isLocalhost = host.Contains("localhost");

    // Check if this is a subdomain (not the main domain)
    var isSubdomain = false;
    var subdomainName = "";
    var subdomainDisplay = "";

    if (!isLocalhost)
    {
        // For production: check if it's a subdomain
        // Examples: storage.autumnridge.com, realestate.autumnridge.com
        var parts = host.Split('.');
        isSubdomain = parts.Length > 2 && !host.StartsWith("www.");
        if (isSubdomain)
        {
            subdomainName = parts[0];
            subdomainDisplay = char.ToUpper(subdomainName[0]) + subdomainName.Substring(1);
        }
    }
    else
    {
        // For localhost: check if URL path indicates subdomain simulation
        // Examples: localhost/storage, localhost/realestate
        var pathSegments = path.Split('/', StringSplitOptions.RemoveEmptyEntries);
        var subdomainPaths = new[] { "storage", "realestate", "contracting", "residential" };
        if (pathSegments.Length > 0 && subdomainPaths.Contains(pathSegments[0]))
        {
            isSubdomain = true;
            subdomainName = pathSegments[0];
            subdomainDisplay = char.ToUpper(subdomainName[0]) + subdomainName.Substring(1);
        }
    }

    // Store subdomain info for other components to use
    if (isSubdomain && HttpContextAccessor.HttpContext != null)
    {
        HttpContextAccessor.HttpContext.Items["Subdomain"] = subdomainName;
        HttpContextAccessor.HttpContext.Items["SubdomainDisplay"] = subdomainDisplay;
    }

    // Division-specific information
    var divisionInfo = subdomainName.ToLower() switch
    {
        "contracting" => "Professional construction and contracting services",
        "realestate" => "Your trusted real estate partner",
        "residential" => "Complete residential solutions",
        "storage" => "Secure storage facilities",
        _ => "Specialized services"
    };

    // Updated navigation links for the banner
    var bannerLinks = new Dictionary<string, string>
    {
        { "Our Mission", "/Mission" },
        { "Contact Us", "/Contact" },
        { "About Us", "/About" }
    };

    string GetLinkUrl(string path)
    {
        if (isLocalhost)
        {
            return path;
        }
        return path;
    }

    string GetLocalSection(string path)
    {
        if (string.IsNullOrWhiteSpace(path) || path == "/")
            return "home";
        var section = path.Split('/', StringSplitOptions.RemoveEmptyEntries).FirstOrDefault();
        return section ?? "home";
    }

    var currentSection = GetLocalSection(path);
}

@* Show division banner if on a subdomain *@
@if (isSubdomain && !string.IsNullOrEmpty(subdomainDisplay))
{
    <div class="alert alert-info mb-0" style="border-radius: 0;">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <strong>@subdomainDisplay Division</strong> - @divisionInfo
                </div>
                <div class="col-md-4 text-md-end">
                    <a href="/" class="btn btn-sm btn-outline-primary">View All Divisions</a>
                </div>
            </div>
        </div>
    </div>
}

@* Only show navigation on subdomains *@
@if (isSubdomain)
{
    <nav class="navigation">
        <div class="nav-content">
            <ul class="nav-menu">
                @foreach (var link in bannerLinks)
                {
                    var key = link.Key;
                    var url = GetLinkUrl(link.Value);
                    var section = link.Value.TrimStart('/').ToLower();
                    var isCurrent = currentSection == section;
                    <li>
                        <a href="@url" class="@(isCurrent ? "active" : "")">@key</a>
                    </li>
                }
            </ul>
            <div class="search-container">
                <form method="get" action="/search" style="display: inline;">
                    <input type="text" name="q" class="search-input" placeholder="Search" />
                </form>
            </div>
        </div>
    </nav>
}